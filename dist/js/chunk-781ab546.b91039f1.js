(window.webpackJsonp = window.webpackJsonp || []).push([['chunk-781ab546'], { '832d': function (e, t, s) { 'use strict'; s.r(t); var o = function () { var e = this; var t = e.$createElement; var s = e._self._c || t; return s('b-container', { attrs: { fluid: '' } }, [s('main-modal', { attrs: { id: 'coursesDetailsModal', size: 'xl' }, scopedSlots: e._u([{ key: 'header', fn: function () { return [e.typeOfModal == 'add' ? s('h4', { staticClass: 'font-weight-bold' }, [s('span', { staticClass: 'text-warning' }, [e._v('Add: ')]), e._v(' Course')]) : s('h4', { staticClass: 'font-weight-bold' }, [s('span', { staticClass: 'text-info' }, [e._v('Edit: ')]), e._v(' Course')])] }, proxy: !0 }, { key: 'body', fn: function () { return [s('courses-details', { attrs: { requestLoading: e.requestLoading, coursesDetails: e.coursesDetails, typeOfModal: e.typeOfModal }, on: { addCourses: e.addCourses, editCourses: e.editCourses } })] }, proxy: !0 }]) }), s('main-modal', { attrs: { id: 'coursesDetailsViewModal', size: 'lg', border: 'true' }, scopedSlots: e._u([{ key: 'header', fn: function () { return [s('h4', { staticClass: 'font-weight-bold' }, [s('span', { staticClass: 'text-success-light' }, [e._v('View: ')]), e._v(' Course')])] }, proxy: !0 }, { key: 'borderHeader', fn: function () { return [s('p', { staticClass: 'p-4 borderHeaderModal m-0' }, [e._v(' ' + e._s(e.coursesDetails.name) + ' '), s('button', { staticClass: 'ml-4 p-2 btn radio-btn', class: 'radio-btn-cyan', attrs: { active: '' } }, [e._v(' ' + e._s(e.coursesDetails.duration) + ' ' + e._s(e.coursesDetails.duration_list.name) + ' ')]), e.optionInd > -1 ? s('button', { staticClass: 'ml-4 p-2 btn radio-btn', class: 'radio-btn-' + e.options[e.optionInd].color + ' radio-btn-selected-' + e.options[e.optionInd].color, attrs: { active: '' } }, [e._v(' ' + e._s(e.options[e.optionInd].text) + ' ')]) : e._e()])] }, proxy: !0 }, { key: 'body', fn: function () { return [s('courses-view', { attrs: { coursesDetails: e.coursesDetails } })] }, proxy: !0 }]) }), s('b-row', [s('b-col', { staticClass: 'mb-2 d-flex justify-content-between align-items-center', attrs: { lg: '12' } }, [s('h3', [e._v('Courses')]), s('div', [s('b-button', { staticClass: 'add_button text-white', attrs: { variant: 'warning' }, on: { click: e.openPopup } }, [e._v(' Add courses'), s('i', { staticClass: 'las la-plus ml-3' })])], 1)]), s('b-col', { attrs: { lg: '12' } }, [s('main-table', { staticClass: 'mb-0 table-borderless', attrs: { fields: e.columns, list_url: 'courses', reloadData: e.reloadTable }, on: { sortChanged: e.sortChanged } })], 1)], 1)], 1) }; var a = []; var r = (s('d3b7'), s('c740'), s('bcae')); var i = function () { var e = this; var t = e.$createElement; var s = e._self._c || t; return s('div', [s('validationObserver', { scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.handleSubmit; return [s('b-form', { on: { submit: function (t) { return t.preventDefault(), o(e.addCourses) } } }, [s('b-row', [s('b-col', { staticClass: 'mb-3', attrs: { lg: '6' } }, [s('b-row', [s('b-col', { staticClass: 'mb-3', attrs: { md: '6' } }, [s('input-form', { attrs: { placeholder: 'Write course name', validate: 'required', name: 'Course name', label: 'Course Name' }, model: { value: e.courses.name, callback: function (t) { e.$set(e.courses, 'name', t) }, expression: 'courses.name' } })], 1), s('b-col', { staticClass: 'mb-3', attrs: { md: '6' } }, [s('label', { attrs: { for: 'duration-group' } }, [e._v('Duration')]), s('b-input-group', { attrs: { id: 'duration-group' }, scopedSlots: e._u([{ key: 'append', fn: function () { return [s('b-dropdown', { staticClass: 'selectWithInputAppend', attrs: { text: e.type ? e.type : 'Pick duration type' } }, e._l(e.allDurationList, function (t, o) { return s('b-dropdown-item', { key: o, on: { click: function (s) { e.courses.duration_list_id = t.id, e.type = t.name } } }, [e._v(' ' + e._s(t.name) + ' ')]) }), 1)] }, proxy: !0 }], null, !0) }, [s('b-form-input', { attrs: { labelTitle: 'Duration', label: 'Duration', placeholder: '000' }, model: { value: e.courses.duration, callback: function (t) { e.$set(e.courses, 'duration', t) }, expression: 'courses.duration' } })], 1)], 1)], 1), s('b-row', [s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'EGP price', rules: 'required|numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Price' } }, [s('b-input-group', { attrs: { append: 'EGP' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 }], attrs: { placeholder: '000.00' }, model: { value: e.courses.price_egp, callback: function (t) { e.$set(e.courses, 'price_egp', t) }, expression: 'courses.price_egp' } })], 1)], 1)] } }], null, !0) })], 1), s('b-col', { staticClass: 'mb-5 pt-4', attrs: { md: '4' } }, [s('b-form-checkbox', { staticClass: 'custom-checkbox-color-check mb-2 mr-sm-2 mb-sm-0', attrs: { type: 'checkbox', color: 'warning' }, model: { value: e.selectedEGP, callback: function (t) { e.selectedEGP = t }, expression: 'selectedEGP' } }, [e._v(' Discounted Price ')])], 1), s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Discounted EGP price', rules: 'numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Discounted Price' } }, [s('b-input-group', { attrs: { append: 'EGP' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 && e.selectedEGP }], attrs: { placeholder: '000.00', validate: e.selectedEGP ? 'required' : '', disabled: !e.selectedEGP }, model: { value: e.courses.discount_price_egp, callback: function (t) { e.$set(e.courses, 'discount_price_egp', t) }, expression: 'courses.discount_price_egp' } })], 1)], 1)] } }], null, !0) })], 1)], 1), s('b-row', [s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'EURO price', rules: 'numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Foreigner Price' } }, [s('b-input-group', { attrs: { append: 'EUR' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 }], attrs: { placeholder: '000.00' }, model: { value: e.courses.price_euro, callback: function (t) { e.$set(e.courses, 'price_euro', t) }, expression: 'courses.price_euro' } })], 1)], 1)] } }], null, !0) })], 1), s('b-col', { staticClass: 'mb-5 pt-4', attrs: { md: '4' } }, [s('b-form-checkbox', { staticClass: 'custom-checkbox-color-check mb-2 mr-sm-2 mb-sm-0', attrs: { type: 'checkbox', color: 'warning' }, model: { value: e.selectedEUR, callback: function (t) { e.selectedEUR = t }, expression: 'selectedEUR' } }, [e._v(' Discounted Price ')])], 1), s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Discounted EURO price', rules: 'numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Discounted Price' } }, [s('b-input-group', { attrs: { append: 'EUR' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 && e.selectedEUR }], attrs: { placeholder: '000.00', disabled: !e.selectedEUR, validate: e.selectedEUR ? 'required' : '' }, model: { value: e.courses.discount_price_euro, callback: function (t) { e.$set(e.courses, 'discount_price_euro', t) }, expression: 'courses.discount_price_euro' } })], 1)], 1)] } }], null, !0) })], 1)], 1), s('b-row', [s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Dollar price', rules: 'numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Foreigner Price' } }, [s('b-input-group', { attrs: { append: '$' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 }], attrs: { placeholder: '000.00' }, model: { value: e.courses.price_dollar, callback: function (t) { e.$set(e.courses, 'price_dollar', t) }, expression: 'courses.price_dollar' } })], 1)], 1)] } }], null, !0) })], 1), s('b-col', { staticClass: 'mb-5 pt-4', attrs: { md: '4' } }, [s('b-form-checkbox', { staticClass: 'custom-checkbox-color-check mb-2 mr-sm-2 mb-sm-0', attrs: { type: 'checkbox', color: 'warning' }, model: { value: e.selectedDollar, callback: function (t) { e.selectedDollar = t }, expression: 'selectedDollar' } }, [e._v(' Discounted Price ')])], 1), s('b-col', { staticClass: 'mb-3', attrs: { md: '4' } }, [s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Discounted Dollar price', rules: 'numeric' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Discounted Price' } }, [s('b-input-group', { attrs: { append: '$' } }, [s('b-form-input', { class: [{ 'is-invalid': o.length > 0 && e.selectedDollar }], attrs: { placeholder: '000.00', disabled: !e.selectedDollar, validate: e.selectedDollar ? 'required' : '' }, model: { value: e.courses.discount_price_dollar, callback: function (t) { e.$set(e.courses, 'discount_price_dollar', t) }, expression: 'courses.discount_price_dollar' } })], 1)], 1)] } }], null, !0) })], 1)], 1), s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Requirements', rules: 'required' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Requirements' } }, [s('b-form-textarea', { class: [{ 'is-invalid': o.length > 0 }], attrs: { placeholder: 'Any required experience or equipment for the course', rows: '1' }, model: { value: e.courses.requirements, callback: function (t) { e.$set(e.courses, 'requirements', t) }, expression: 'courses.requirements' } })], 1)] } }], null, !0) }), s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Conditions', rules: 'required' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Conditions' } }, [s('b-form-textarea', { class: [{ 'is-invalid': o.length > 0 }], attrs: { placeholder: 'Any age, health, or weight requirements to participate', rows: '1' }, model: { value: e.courses.conditions, callback: function (t) { e.$set(e.courses, 'conditions', t) }, expression: 'courses.conditions' } })], 1)] } }], null, !0) })], 1), s('b-col', { staticClass: 'mb-3', attrs: { lg: '6' } }, [s('b-form-group', { attrs: { label: 'Pick Level' } }, [s('div', { staticClass: 'd-flex flex-wrap mb-2 flex-grow-1 justify-content-around' }, e._l(e.options, function (t, o) { return s('span', { key: o }, [s('button', { staticClass: 'btn radio-btn', class: 'radio-btn-' + t.color + ' ' + (e.selectLevel(t.value) ? 'radio-btn-selected-' + t.color : ''), on: { click: function (s) { s.preventDefault(), e.courses.level = t.value } } }, [e._v(' ' + e._s(t.text) + ' ')])]) }), 0)]), s('main-select', { attrs: { labelTitle: 'Location', validate: 'required', taggable: !0, multiple: '', name: 'Locations', placeholder: 'Add multiple location tags', numberOfSelect: 3 }, model: { value: e.courses.location, callback: function (t) { e.$set(e.courses, 'location', t) }, expression: 'courses.location' } }), s('validation-provider', { staticClass: 'flex-grow-1', attrs: { name: 'Description', rules: 'required' }, scopedSlots: e._u([{ key: 'default', fn: function (t) { var o = t.errors; return [s('b-form-group', { attrs: { label: 'Description' } }, [s('b-form-textarea', { class: [{ 'is-invalid': o.length > 0 }], attrs: { label: 'courses', placeholder: 'Write your description about this activity….', rows: '4' }, model: { value: e.courses.description, callback: function (t) { e.$set(e.courses, 'description', t) }, expression: 'courses.description' } })], 1)] } }], null, !0) })], 1)], 1), s('b-row', [s('b-col', { staticClass: 'mb-5', attrs: { md: '12' } }, [s('cropper-images', { attrs: { label: 'Upload Photos', removeLoadingUi: e.removeLoadingUi, progressLoading: e.progressBar, images: e.courses.images }, on: { 'cropper-save': e.saveGalleryImage, 'remove-image': e.removeGalleryImage } })], 1)], 1), e.typeOfModal != 'view' ? s('b-row', [s('b-col', { staticClass: 'mt-4', attrs: { md: '12' } }, [e.typeOfModal == 'add' ? s('div', { staticClass: 'd-flex justify-content-center' }, [e.requestLoading ? s('b-button', { staticClass: 'button-orange-modal' }, [s('spinner-loading')], 1) : s('b-button', { staticClass: 'button-orange-modal', attrs: { type: 'submit' } }, [s('i', { staticClass: 'las la-plus' })])], 1) : e._e(), e.typeOfModal == 'edit' ? s('div', { staticClass: 'd-flex justify-content-center' }, [e.requestLoading ? s('b-button', { staticClass: 'button-blue-modal' }, [s('spinner-loading')], 1) : s('b-button', { staticClass: 'button-blue-modal', attrs: { type: 'submit' } }, [s('i', { staticClass: 'las la-pen' })])], 1) : e._e()])], 1) : e._e()], 1)] } }]) })], 1) }; var l = []; var c = s('5530'); var n = (s('d81d'), s('b0c0'), s('a434'), s('a4d3'), s('e01a'), s('5636')); var u = s('df21'); var d = { props: { requestLoading: { type: Boolean, default: !1, required: !1 }, typeOfModal: { type: String, default: 'add', required: !1 }, coursesDetails: { required: !1 } }, data: function () { return { courses: { name: '', requirements: '', conditions: '', description: '', price_egp: '', price_euro: '', price_dollar: '', discount_price_egp: '', discount_price_euro: '', discount_price_dollar: '', duration: '', status: 'active', images: [], location: '', duration_list_id: '', level: 'all' }, type: '', selectedEGP: '', selectedEUR: '', selectedDollar: '', options: [{ text: 'ALL LEVELS', value: 'all', color: 'blue' }, { text: 'BEGINNER', value: 'beginner', color: 'cyan' }, { text: 'INTERMEDIATE', value: 'intermediate', color: 'orange' }, { text: 'ADVANCED', value: 'advanced', color: 'red' }], allDurationList: [], loadingGallery: 0, progressBar: 0, removeLoadingUi: !1 } }, components: {}, methods: { addCourses: function () { this.courses.price_euro = this.courses.price_euro ? this.courses.price_euro : 0, this.courses.price_dollar = this.courses.price_dollar ? this.courses.price_dollar : 0, this.courses.discount_price_egp = this.selectedEGP ? this.courses.discount_price_egp : '', this.courses.discount_price_euro = this.selectedEUR ? this.courses.discount_price_euro : '', this.courses.discount_price_dollar = this.selectedDollar ? this.courses.discount_price_dollar : '', this.typeOfModal === 'add' ? this.$emit('addCourses', Object(c.a)(Object(c.a)({}, this.courses), {}, { images: this.courses.images.map(function (e) { return e.id }) })) : this.$emit('editCourses', Object(c.a)(Object(c.a)({}, this.courses), {}, { images: this.courses.images.map(function (e) { return e.id }), _method: 'put' })) }, saveGalleryImage: function (e) { var t = this; this.removeLoadingUi = !1, this.requestLoading = !0; var s = new FormData(); s.append('image', e.image), s.append('type', 'course'), s.append('status', this.coursesDetails ? 'exist' : 'new'), s.append('name', e.imageInfo.name), this.coursesDetails && s.append('course_id', this.coursesDetails.id); var o = { onUploadProgress: function (e) { var s = e.loaded; var o = e.total; var a = Math.floor(100 * s / o); console.log(a), t.progressBar = a } }; n.a.addImage(s, o).then(function (e) { r.c.showSnackbar('success', e.data.message), t.courses.images.push(e.data.data), t.removeLoadingUi = !0, t.requestLoading = !1 }) }, removeGalleryImage: function (e) { var t = this; n.a.removeImage(e, 'course').then(function (s) { r.c.showSnackbar('success', s.data.message); var o = t.courses.images.findIndex(function (t) { return t.id === e }); t.courses.images.splice(o, 1) }) }, getDurationList: function () { var e = this; u.a.getDurationList().then(function (t) { e.allDurationList = t.data.data }) }, selectLevel: function (e) { return this.courses.level === e } }, watch: {}, computed: {}, created: function () { this.getDurationList(), this.coursesDetails && (this.coursesDetails.discount_price_egp && (this.selectedEGP = !0), this.coursesDetails.discount_price_euro && (this.selectedEUR = !0), this.coursesDetails.discount_price_dollar && (this.selectedDollar = !0), this.courses = { name: this.coursesDetails.name, requirements: this.coursesDetails.requirements, conditions: this.coursesDetails.conditions, description: this.coursesDetails.description, price_egp: this.coursesDetails.price_egp, price_euro: this.coursesDetails.price_euro ? this.coursesDetails.price_euro : '', price_dollar: this.coursesDetails.price_dollar ? this.coursesDetails.price_dollar : '', discount_price_egp: this.coursesDetails.discount_price_egp, discount_price_euro: this.coursesDetails.discount_price_euro, discount_price_dollar: this.coursesDetails.discount_price_dollar, status: this.coursesDetails.status, images: this.coursesDetails.images, location: this.coursesDetails.location, duration_list_id: this.coursesDetails.duration_list_id, level: this.coursesDetails.level, duration: this.coursesDetails.duration }) } }; var p = d; var b = s('2877'); var m = Object(b.a)(p, i, l, !1, null, null, null); var f = m.exports; var g = function () { var e = this; var t = e.$createElement; var s = e._self._c || t; return s('div', { staticClass: 'pl-3 pr-3' }, [s('b-row', [s('b-col', { staticClass: 'border-right py-5', attrs: { lg: '6', 'order-lg': '1', order: '2' } }, [s('h5', { staticClass: 'mb-4 font-size-14' }, [e._v('COURSE INFORMATION')]), s('b-row', { staticClass: 'pl-3 mb-2' }, [s('b-col', { staticClass: 'infoKey', attrs: { md: '12' } }, [s('p', [e._v('Description')])]), s('b-col', { staticClass: 'infoValue', attrs: { md: '12' } }, [s('p', [e._v(e._s(e.coursesDetails.description))])])], 1), s('b-row', { staticClass: 'pl-3 mb-2' }, [s('b-col', { staticClass: 'infoKey', attrs: { md: '4' } }, [s('p', [e._v('Price')])]), s('b-col', { staticClass: 'infoKey', attrs: { md: '8' } }, [s('p', [e._v('Discounted price')])]), s('b-col', { staticClass: 'infoValue', attrs: { md: '4' } }, [s('p', [e._v('EGP ' + e._s(e.coursesDetails.price_egp))])]), s('b-col', { staticClass: 'infoValue', attrs: { md: '8' } }, [s('p', [e.coursesDetails.discount_price_egp ? s('span', [e._v('EGP ' + e._s(e.coursesDetails.discount_price_egp))]) : s('span', [e._v('N/A')])])])], 1), s('b-row', { staticClass: 'pl-3 mb-2' }, [s('b-col', { staticClass: 'infoKey', attrs: { md: '12' } }, [s('p', [e._v('Requirements')])]), s('b-col', { staticClass: 'infoValue', attrs: { md: '12' } }, [s('p', [e._v(e._s(e.coursesDetails.requirements))])])], 1), s('b-row', { staticClass: 'pl-3 mb-2' }, [s('b-col', { staticClass: 'infoKey', attrs: { md: '12' } }, [s('p', [e._v('Conditions')])]), s('b-col', { staticClass: 'infoValue', attrs: { md: '12' } }, [s('p', [e._v(e._s(e.coursesDetails.conditions))])])], 1), s('b-row', { staticClass: 'pl-3 mb-2' }, [s('b-col', { staticClass: 'infoKey', attrs: { md: '12' } }, [s('p', [e._v('Locations')])]), e._l(e.coursesDetails.locations, function (t, o) { return s('b-col', { key: o, staticClass: 'infoValue', attrs: { md: '4' } }, [s('p', [e._v(e._s(t))])]) })], 2)], 1), s('b-col', { staticClass: 'py-5', attrs: { lg: '6', 'order-lg': '2', order: '1' } }, [s('h5', { staticClass: 'mb-4 font-size-14' }, [e._v('COURSE PHOTOS')]), s('slider-thumbs', { attrs: { images: e.coursesDetails.images } })], 1)], 1)], 1) }; var h = []; var _ = { props: { coursesDetails: { type: Object } } }; var v = _; var y = Object(b.a)(v, g, h, !1, null, null, null); var C = y.exports; var D = s('bb36'); var x = { addNewCourses: function (e) { return Object(D.a)().post('courses', e) }, getCoursesDetails: function (e) { return Object(D.a)().get('courses/'.concat(e)) }, editCourses: function (e, t) { return Object(D.a)().post('courses/'.concat(e), t) } }; var w = { data: function () { return { reloadTable: !1, requestLoading: !1, columns: [{ label: '#', key: 'id', class: 'text-left' }, { label: 'Courses Name', key: 'name', class: 'text-left' }, { label: 'Level', key: 'level', class: 'text-left' }, { label: 'Price EGP/EUR', key: 'price_egp,price_euro', class: 'text-left', type: 'multi-value', pre: 'EGP,EUR' }, { label: 'Discounted Price', key: 'discount_price_egp,discount_price_euro', class: 'text-left', type: 'multi-value' }, { label: 'Description', key: 'description', class: 'text-left' }, { label: 'Duration', key: 'duration,duration_list.name', class: 'text-left', type: 'multi-text' }, { label: 'Requirements', key: 'requirements', class: 'text-left' }, { label: 'Conditions', key: 'conditions', class: 'text-left' }, { label: 'Location', key: 'location', class: 'text-left', type: 'array' }, { label: 'Photos', key: 'images', class: 'text-left', type: 'multi_image' }, { label: 'Change Status', key: 'change_status', type: 'switch', tableType: 'course', idKey: 'course_id', class: 'text-left' }, { label: 'Actions', key: 'actions', class: 'text-left', type: 'actions', actions: [{ icon: 'las la-eye', color: 'success-light', text: 'View', actionName: 'showCourses', actionParams: 'fullObj' }, { icon: 'las la-pen', color: 'info', text: 'Edit', actionName: 'showCoursesToEdit', actionParams: 'fullObj' }, { icon: 'las la-trash-alt', color: 'danger', text: 'Delete', showAlert: !0, actionHeader: 'Delete', titleHeader: 'Courses', textContent: 'name', url: 'courses' }] }], options: [{ text: 'ALL LEVELS', value: 'all', color: 'blue' }, { text: 'BEGINNER', value: 'beginner', color: 'cyan' }, { text: 'INTERMEDIATE', value: 'intermediate', color: 'orange' }, { text: 'ADVANCED', value: 'advanced', color: 'red' }], optionInd: '', typeOfModal: 'add', coursesDetails: {}, coursesId: '' } }, components: { coursesDetails: f, coursesView: C }, methods: { sortChanged: function (e) { console.log(e) }, openPopup: function () { this.coursesId = '', this.typeOfModal = 'add', this.coursesDetails = !1, this.$bvModal.show('coursesDetailsModal') }, addCourses: function (e) { var t = this; this.requestLoading = !0, this.reloadTable = !1, x.addNewCourses(e).then(function (e) { t.reloadTable = !0, r.c.showSnackbar('success', e.data.message), t.$bvModal.hide('coursesDetailsModal') }).finally(function () { t.requestLoading = !1 }) }, editCourses: function (e) { var t = this; this.requestLoading = !0, this.reloadTable = !1, x.editCourses(this.coursesId, e).then(function (e) { t.reloadTable = !0, r.c.showSnackbar('success', e.data.message), t.$bvModal.hide('coursesDetailsModal') }).finally(function () { t.requestLoading = !1 }) }, showDetails: function (e) { var t = this; this.coursesId = '', this.typeOfModal = 'view', this.optionInd = this.options.findIndex(function (t) { return t.value === e.level }), this.coursesDetails = e, setTimeout(function () { return t.$bvModal.show('coursesDetailsViewModal') }, 0) }, showCoursesToEdit: function (e) { this.typeOfModal = 'edit', this.coursesId = e.id, this.coursesDetails = e, this.$bvModal.show('coursesDetailsModal') } }, created: function () { this.$root.$on('showCourses', this.showDetails), this.$root.$on('showCoursesToEdit', this.showCoursesToEdit) }, beforeDestroy: function () { this.$root.$off('showCourses'), this.$root.$off('showCoursesToEdit') }, mounted: function () { r.c.index() } }; var k = w; var E = Object(b.a)(k, o, a, !1, null, null, null); t.default = E.exports }, df21: function (e, t, s) { 'use strict'; var o = s('bb36'); t.a = { getProfileSettings: function () { return Object(o.a)().get('settings') }, updateProfileSettings: function (e) { return Object(o.a)().post('settings', e) }, getAllActivityLine: function () { return Object(o.a)().get('activityLines') }, addNewActivityLine: function (e) { return Object(o.a)().post('activityLines', e) }, getAllActivityType: function () { return Object(o.a)().get('activityTypes') }, addNewActivityType: function (e) { return Object(o.a)().post('activityTypes', e) }, getDurationList: function () { return Object(o.a)().get('durationLists') }, addNewDurationList: function (e) { return Object(o.a)().post('durationLists', e) }, getAllnationalities: function () { return Object(o.a)().get('nationalities') }, addNewNationality: function (e) { return Object(o.a)().post('nationalities', e) }, getAllAccommodationTypes: function () { return Object(o.a)().get('accommodationTypes') }, addNewAccommodationType: function (e) { return Object(o.a)().post('accommodationTypes', e) }, getAllLinks: function () { return Object(o.a)().get('links') }, addNewLink: function (e) { return Object(o.a)().post('links', e) }, getAllLanguages: function () { return Object(o.a)().get('languages') }, addNewLanguage: function (e) { return Object(o.a)().post('languages', e) }, getAllCountries: function () { return Object(o.a)().get('countries') }, getCountryCity: function (e) { return Object(o.a)().get('countries/'.concat(e)) }, addNewCountry: function (e) { return Object(o.a)().post('countries', e) }, getAllCities: function () { return Object(o.a)().get('cities') }, addNewCity: function (e) { return Object(o.a)().post('cities', e) }, getCityArea: function (e) { return Object(o.a)().get('cities/'.concat(e)) }, getAllAreas: function () { return Object(o.a)().get('areas') }, addNewArea: function (e) { return Object(o.a)().post('areas', e) }, getAllAmenities: function () { return Object(o.a)().get('amenities') } } } }])
// # sourceMappingURL=chunk-781ab546.b91039f1.js.map
